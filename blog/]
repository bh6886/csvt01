#!/usr/bin/env python
# -*- coding: utf-8 -*-

from django.template import loader, Context, Template
from django.shortcuts import render_to_response
from django.http import HttpResponseRedirect
import os,sys
import glob
import re
import datetime,time
import platform
import urllib,urllib2,paramiko,shutil,pexpect

from django.shortcuts import render
from django.shortcuts import render_to_response
from django import forms
from django.http import HttpResponse

from django.contrib.auth.decorators import login_required
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login as user_login, logout as user_logout
from django.contrib.auth.decorators import login_required


from random import Random
from multiprocessing import Process
import httplib
import simplejson as json



now_time = datetime.datetime.now()
t =  now_time.strftime('%Y-%m-%d')

def login(request):
    if request.method == 'POST':
            username = request.POST['username']
            password = request.POST['password']
            user = authenticate(username=username, password=password)
            if user is not None:
                if user.is_active:
                            user_login(request, user)
                            return HttpResponseRedirect('/')
                else:
                    return HttpResponse('用户没有启用!')
            else:
                return HttpResponse('用户名或者密码错误！')
    else:
        return render_to_response('login.html')



def loginout(request):
    user_logout(request)
    return HttpResponseRedirect('/login/')


def time():
  now_time = datetime.datetime.now()
  t =  now_time.strftime('%Y-%m-%d')
  return t


@login_required
def index(req):
  now_time = datetime.datetime.now()
  t =  now_time.strftime('%Y-%m-%d %H:%M:%S')
  time = [t]
  return render_to_response('index.html',{'title':'taotaosou','time':time})

def TEST(A,B):

 url_str = A
 url_status = dict()

 def is_url(url):
        try:
                html = urllib2.urlopen(url).read()
                return html.find(url_str)
        except:
                return "Request Url Error"

 for url in open(B):
        url =url.strip("\n")
        if url != "":
                for i in range(1, 2):
                        num = is_url(url)
                        if not isinstance(num, str):
                                #print num
                                if num >= 0:
                                        url_status[url] = "正常"
                                        break
                                else:
                                        url_status[url] = "错误，请检查"
                        else:
                                url_status[url] = num
 TT = []
 for key in url_status.keys():
        TT.append("%s 接口为 %s" %(key, url_status[key]))
 return  TT  

def www(req):
 TT = TEST('taotaosou','/opt/csvt01/url/www.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def app(req):
 TT = TEST('taotaosou','/opt/csvt01/url/app.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def client(req):
 TT = TEST('chaoji99','/opt/csvt01/url/client.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})

def item(req):
 TT = TEST('去购买','/opt/csvt01/url/item.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def search(req):
 TT = TEST('女包','/opt/csvt01/url/search.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})

def service(req):
 TT = TEST('www.taotaosou.com','/opt/csvt01/url/service.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})

 
def tejia(req):
 TT = TEST('tejia.taotaosou.com','/opt/csvt01/url/tejia.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})

def tuan(req):
 TT = TEST('tuan.taotaosou.com','/opt/csvt01/url/tuan.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})

def dapei(req):
 TT = TEST('dapei.taotaosou.com','/opt/csvt01/url/dapei.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})
 
def sitemap(req):
 TT = TEST('泳衣','/opt/csvt01/url/sitemap.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def br(req):
 TT = TEST('JSP','/opt/csvt01/url/br.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})

def recom(req):
 TT = TEST('item.taobao.com','/opt/csvt01/url/recom.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})

def showmold(req):
 TT = TEST('res','/opt/csvt01/url/showmold.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def showapp(req):
 TT = TEST('Hello Boy','/opt/csvt01/url/showapp.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})
 

def showeng(req):
 TT = TEST('Hello Boy','/opt/csvt01/url/showeng.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA}) 


def control(req):
 TT = TEST('status','/opt/csvt01/url/control.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})

def cmsproxy(req):
 TT = TEST('this is a test page for cms proxy service','/opt/csvt01/url/cmsproxy.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def seckill(req):
 TT = TEST('seckill server','/opt/csvt01/url/seckill.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def pay_web(req):
 TT = TEST('body','/opt/csvt01/url/pay_web.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})

def trade_web(req):
 TT = TEST('body','/opt/csvt01/url/trade_web.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def chaoji99(req):
 TT = TEST('chaoji99','/opt/csvt01/url/chaoji99.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def app99(req):
 TT = TEST(']','/opt/csvt01/url/app99.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def sso(req):
 TT = TEST('sendsms.do','/opt/csvt01/url/sso.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})


def sp(req):
 TT = TEST('依赖如下','/opt/csvt01/url/sp.txt')
 AA = len(TT)
 return render_to_response('showmold.html',{'TT':TT,'AA':AA})

########################################################################################### 

def do_post(img,img1,img2,img3):
  params = urllib.urlencode({'username': 'taotaosou-cdn', \
                             'password' : '<^^XS$3VZy', \
                             'task': '{"urls":[""] ,\
                                       "dirs":["%s","%s","%s","%s"],\
                             "callback" : {"url":"","email" : [ "bohan@taotaosou.com" ], "acptNotice": true}}' % (img,img1,img2,img3)})
  f = urllib.urlopen("http://r.chinacache.com/content/refresh" , params)
  return  f.code
  #print f.read()


def do_post1(img):
  params = urllib.urlencode({'username': 'taotaosou-cdn', \
                             'password' : '<^^XS$3VZy', \
                             'task': '{"urls":[""] ,\
                                       "dirs":["%s"],\
                             "callback" : {"url":"","email" : [ "bohan@taotaosou.com" ], "acptNotice": true}}' % img})
  f = urllib.urlopen("http://r.chinacache.com/content/refresh" , params)
  return  f.code
  #print f.read()
##########################################################################################
 
def autowww(req):
 dir = u'/nfsdata/bohan/sypt-super/www/'
 auto = u'/home/app/auto_file/tts/tts-www-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = AUTOCONFIG.split('\n') 
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/autowww.html',{'title':'autowww','aa':aa})


class UserForm(forms.Form):
    name = forms.CharField()
def register(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/www/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                #print remotepath 
                #print localpath
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-app.html',{'form':form})


def depwww121(req):
 ip = '10.0.0.121'

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/www.py')
 child.expect('@')
 deyy = child.before  
 dey = deyy.split('\n')
 return render_to_response('auto/depwww121.html',{'title':'depwww','dey':dey})


def depwww80(req):
 ip = '192.168.3.80'

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/www.py')
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/depwww80.html',{'title':'depwww','dey':dey})

def depwww81(req):
 ip = '192.168.3.81'

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/www.py')
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/depwww81.html',{'title':'depwww','dey':dey})

class UserForm(forms.Form):       
    name = forms.CharField()   
def registerapp(req):                
    if req.method == 'POST':   
        form = UserForm(req.POST) 
        if form.is_valid():       
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/app/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                #print remotepath 
                #print localpath
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-app.html',{'form':form})
	
#autoconfig

def autoapp(req):
 dir = u'/nfsdata/bohan/sypt-super/app/'
 auto = u'/home/app/auto_file/tts/tts-app-service-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 os.popen("chmod  777 %s" % WAR).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-app.html',{'title':'autoapp','aa':aa})

def zzbsapp(req):
 return render_to_response('auto/zzbs-app.html',{'title':'zzbs'})

###dep###

def depapp121(req):
 ip = '10.0.0.121'

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/app.py')
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-app121.html',{'title':'dep-app','dey':dey})


def depapp186(req):
 ip = '192.168.3.186'

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/app.py')
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-app186.html',{'title':'dep-app','dey':dey})

def depapp22(req):
 ip = '10.0.0.22'

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/app.py')
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-app22.html',{'title':'dep-app','dey':dey})

##################################client#########################################
class UserForm(forms.Form):
    name = forms.CharField()
def registerclient(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/client/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-client.html',{'form':form})  #chage

#autoconfig


def autoclient(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/client/'         #chage
 auto = u'/home/app/auto_file/tts/tts-client-service-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-client.html',{'title':'autoclient','aa':aa})    #chage
 
 
def zzbsclient(req):			#chage
 return render_to_response('auto/zzbs-client.html',{'title':'zzbs'})  #chage

###dep###


def depclient186(req):   #chage
 ip = '192.168.3.186'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/client.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-client186.html',{'title':'dep-client','dey':dey})    #chage

def depclient22(req):  
 ip = '10.0.0.22'    

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/client.py') 
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-client22.html',{'title':'dep-client','dey':dey})   #chage

def depclient183(req):   #chage
 ip = '10.0.0.183'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/client.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-client183.html',{'title':'dep-client','dey':dey})    #chage

def depclient51(req):   #chage
 ip = '10.0.0.51'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/client.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-client51.html',{'title':'dep-client','dey':dey})    #chage


def registeritem(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/item/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-item.html',{'form':form})  #chage
#autoconfig


def autoitem(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/item/'         #chage
 auto = u'/home/app/auto_file/tts/tts-item-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-item.html',{'title':'autoi','aa':aa})    #chage

 
def zzbsitem(req):			#chage
 return render_to_response('auto/zzbs-item.html',{'title':'zzbs'})  #chage


def depitem59(req):  #chage
 ip = '10.0.0.59'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/item.py')  #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-item59.html',{'title':'dep-item','dey':dey})  #chage


def depitem17(req):   #chage
 ip = '192.168.3.17'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/item.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-item17.html',{'title':'dep-item','dey':dey})    #chage

def depitem37(req):  #chage
 ip = '192.168.3.37'  #chage   

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/item.py')  #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-item37.html',{'title':'dep-item','dey':dey})   #chage



def registersearch(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/search/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-search.html',{'form':form})  #chage


#autoconfig


def autosearch(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/search/'         #chage
 auto = u'/home/app/auto_file/tts/tts-search-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-search.html',{'title':'autosearch','aa':aa})    #chage
 
 
def zzbssearch(req):                    #chage
 return render_to_response('auto/zzbs-search.html',{'title':'zzbs'})  #chage



def depsearch17(req):   #chage
 ip = '192.168.3.17'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/search.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-search17.html',{'title':'dep-search','dey':dey})    #chage

def depsearch37(req):  
 ip = '192.168.3.37'    

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/search.py') 
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-search37.html',{'title':'dep-search','dey':dey})   #chage

def registerservice(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/service/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-search.html',{'form':form})  #chage

#autoconfig

 
def autoservice(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/service/'         #chage
 auto = u'/home/app/auto_file/tts/tts-app-service-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-service.html',{'title':'autoservice','aa':aa})    #chage



def zzbsservice(req):                    #chage
 return render_to_response('auto/zzbs-service.html',{'title':'zzbs'})  #chage

###dep###


def depservice22(req):   #chage
 ip = '10.0.0.22'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/service.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-service22.html',{'title':'dep-service','dey':dey})    #chage

def depservice52(req):  
 ip = '10.0.0.52'    

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/service.py') 
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-service52.html',{'title':'dep-service','dey':dey})   #chage

def depservice59(req):
 ip = '10.0.0.59'

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/service.py')
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-service59.html',{'title':'dep-service','dey':dey})   #chage


#########################################tejia_dep################################################
def registertejia(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/tejia/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-tejia.html',{'form':form})  #chage


#autoconfig


 
def zzbstejia(req):                    #chage
 return render_to_response('auto/zzbs-tejia.html',{'title':'zzbs'})  #chage

def autotejia(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/tejia/'         #chage
 auto = u'/home/app/auto_file/tts/tts-tejia-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-tejia.html',{'title':'autotejia','aa':aa})    #chage




###dep###


def deptejia19(req):   #chage
 ip = '192.168.3.19'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/tejia.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-tejia18.html',{'title':'dep-tejia','dey':dey})    #chage

def deptejia18(req):  
 ip = '192.168.3.18'    

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/tejia.py') 
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-tejia18.html',{'title':'dep-tejia','dey':dey})   #chage


#########################################tuan_dep################################################
def registertuan(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/tuan/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-tuan.html',{'form':form})  #chage


#autoconfig



def zzbstuan(req):                    #chage
 return render_to_response('auto/zzbs-tuan.html',{'title':'zzbs'})  #chage

def autotuan(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/tuan/'         #chage
 auto = u'/home/app/auto_file/tts/tts-tuan-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-tuan.html',{'title':'autotuan','aa':aa})    #chage

###dep###


def deptuan18(req):   #chage
 ip = '192.168.3.18'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/tuan.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-tuan18.html',{'title':'dep-tuan','dey':dey})    #chage

def deptuan19(req):  
 ip = '192.168.3.19'    

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/tuan.py') 
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-tuan19.html',{'title':'dep-tuan','dey':dey})   #chage


#########################################sitemap_dep################################################
def registersitemap(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/sitemap/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-sitemap.html',{'form':form})  #chage


#autoconfig

def autositemap(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/sitemap/'         #chage
 auto = u'/home/app/auto_file/tts/tts-sitemap-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-sitemap.html',{'title':'autositemap','aa':aa})    #chage

 
def zzbssitemap(req):                    #chage
 return render_to_response('auto/zzbs-sitemap.html',{'title':'zzbs'})  #chage

###dep###


def depsitemap80(req):   #chage
 ip = '192.168.3.80'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/sitemap.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-sitemap80.html',{'title':'dep-sitemap','dey':dey})    #chage

def depsitemap83(req):  
 ip = '192.168.3.83'    

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/sitemap.py') 
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-sitemap83.html',{'title':'dep-sitemap','dey':dey})   #chage


#########################################dapei_dep################################################

def registerdapei(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/dapei/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-dapei.html',{'form':form})  #chage


#autoconfig

def autodapei(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/dapei/'         #chage
 auto = u'/home/app/auto_file/tts/tts-dapei-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-dapei.html',{'title':'autodapei','aa':aa})    #chage


def zzbsdapei(req):                    #chage
 return render_to_response('auto/zzbs-dapei.html',{'title':'zzbs'})  #chage

###dep###


def depdapei106(req):   #chage
 ip = '192.168.3.106'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/dapei.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-dapei106.html',{'title':'dep-dapei','dey':dey})    #chage

def depdapei37(req):  
 ip = '192.168.3.37'    
 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/dapei.py') 
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-dapei37.html',{'title':'dep-dapei','dey':dey})   #chage
def depdapei80(req):
 ip = '192.168.3.80'
 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/dapei.py')
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-dapei80.html',{'title':'dep-dapei','dey':dey})   #chage

#########################################back#########################
def registerback(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/back/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-back.html',{'form':form})  #chage

#autoconfig


def autoback(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/back/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autoback','aa':aa})    #chage

def zzbsback(req):                    #chage
 return render_to_response('auto/zzbs-back.html',{'title':'zzbs'})  #chage

###dep###


def depback106(req):   #chage
 ip = '192.168.3.106'  #chage

 child = pexpect.spawn('ssh -t -p 58022 %s sudo su - app' % ip)
 child.expect('@')
 child.sendline('/home/app/shell/back.py')   #chage
 child.expect('@')
 deyy = child.before
 dey = deyy.split('\n')
 return render_to_response('auto/dep-back106.html',{'title':'dep-106','dey':dey})    #chage

################check tomcat log tail -n 200#############################################
def ssh(ip,port,user,shell1,shell2):
        ssh = paramiko.SSHClient()
        ssh.load_system_host_keys()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ip,port,user)
        channel = ssh.invoke_shell()
        channel.settimeout(60)
        channel.send('%s\n' % shell1)
        buff = ''
        while not buff.endswith('$ '):
            resp = channel.recv(9999)
            buff +=resp
        buff = ''
        channel.send('%s\n' % shell2)
        while not buff.endswith('$ '):
            resp = channel.recv(9999)
            buff +=resp
        result = buff
        return result
        ssh.close()

def logindex(req):                    #chage
 return render_to_response('auto/log_index.html',{'title':'log_index'})  #chage

def logindex1(req):                    #chage
 return render_to_response('auto/log_index1.html',{'title':'log_index1'})  #chage

def registerbijiadep(req):   #chage
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/bijiadep/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/bijiadep/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('auto/register-bijiadep.html',{'form':form})  #chage

def zzbsbijiadep(req):                    #chage
 return render_to_response('auto/zzbs-bijiadep.html',{'title':'zzbs'})  #chage

def autoconfig(dir,auto):          #chage
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 os.popen("chmod -R 777 %s" % WAR).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 #os.remove(WAR)
 return aa


def bijiadep_auto(seq):
       aa = autoconfig('/nfsdata/bohan/sypt-super/bijiadep/','/home/app/auto_file/bijia/auto.browser.properties')
       return render_to_response('auto/auto.html',{'title':'autoconfig','aa':aa}) 
def bijiadep_183(seq):
       sun = ssh('10.0.0.183',58022,'bohan','sudo su - app','/home/app/shell/bohan.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})       
def bijiadep_94(seq):
       sun = ssh('192.168.3.94',58022,'bohan','sudo su - app','/home/app/shell/bohan.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})  
def bijiadep_83(seq):
       sun = ssh('192.168.3.83',58022,'bohan','sudo su - app','/home/app/shell/bohan.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss}) 
def bijiadep_48(seq):
       sun = ssh('10.0.0.48',58022,'bohan','sudo su - app','/home/app/shell/bohan.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss}) 
def bijiadep_51(seq):
       sun = ssh('10.0.0.51',58022,'bohan','sudo su - app','/home/app/shell/bohan.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})
#def bijiadep_23(seq):
#       sun = ssh('10.0.0.23',58022,'bohan','sudo su - app','/home/app/shell/bohan.py')
#       ss = sun.split('\n')
#       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss}) 
def bijiadep_183_wc(seq):
       sun = ssh('10.0.0.183',58022,'bohan','sudo su - app','for a in 8{1..4}80;do netstat -na |grep $a |grep  CLOSE_WAIT  |wc -l;done')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})       
def bijiadep_94_wc(seq):
       sun = ssh('192.168.3.94',58022,'bohan','sudo su - app','for a in 8{1..3}80;do netstat -na |grep $a |grep  CLOSE_WAIT  |wc -l;done')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})  
def bijiadep_83_wc(seq):
       sun = ssh('192.168.3.83',58022,'bohan','sudo su - app','for a in 9{1..3}80;do netstat -na |grep $a |grep  CLOSE_WAIT  |wc -l;done')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss}) 
def bijiadep_48_wc(seq):
       sun = ssh('10.0.0.48',58022,'bohan','sudo su - app','for a in 8{1..3}80;do netstat -na |grep $a |grep  CLOSE_WAIT  |wc -l;done')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss}) 
def bijiadep_51_wc(seq):
       sun = ssh('10.0.0.51',58022,'bohan','sudo su - app','for a in 8{1..3}80;do netstat -na |grep $a |grep  CLOSE_WAIT  |wc -l;done')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})

###################################################recom###########################################
def registerrecomdep(req):   #chage
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/recomdep/*.war')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/recomdep/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage

def zzbsrecomdep(req):                    #chage
 return render_to_response('auto/zzbs-recomdep.html',{'title':'zzbs'})  #chage

def recomdep_auto(seq):
       aa = autoconfig('/nfsdata/bohan/sypt-super/recomdep/',' /home/app/auto_file/bijia/auto.browser-recom.properties')
       return render_to_response('auto/auto.html',{'title':'autoconfig','aa':aa})

def recomdep_23(seq):
       sun = ssh('10.0.0.23',58022,'bohan','sudo su - app','/home/app/shell/bohan1.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-recomcs','ss':ss})       
def recomdep_51(seq):
       sun = ssh('10.0.0.51',58022,'bohan','sudo su - app','/home/app/shell/bohan1.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-recomcs','ss':ss})  

def recomdep_23_wc(seq):
       sun = ssh('10.0.0.23',58022,'bohan','sudo su - app','/home/app/shell/jkport.sh')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-recomcs','ss':ss})       
def recomdep_51_wc(seq):
       sun = ssh('10.0.0.51',58022,'bohan','sudo su - app','/home/app/shell/jkport.sh')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-recomcs','ss':ss})  
#def recomdepdel(seq):
#       sun = ssh('10.0.0.51',58022,'bohan','sudo su - bohan','rm -rf /nfsdata/bohan/sypt-super/recomdep/*.war')
#       ss = sun.split('\n')
#       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})
#####################################################tts_control###########################
def autoconfig1(dir,auto):          #chage
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 os.popen("chmod -R 777 %s" % WAR).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return aa

def registercontroldep(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/controldep/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage

def zzbscontroldep(req):                    #chage
 return render_to_response('auto/zzbs-controldep.html',{'title':'zzbs'})  #chage

def controldep_auto(seq):
       aa = autoconfig1('/nfsdata/bohan/sypt-super/controldep/',' /home/app/auto_file/tts/tts-control-autoconfig.properties')
       return render_to_response('auto/auto.html',{'title':'autoconfig','aa':aa})

def controldep_18(seq):
       sun = ssh('192.168.3.18',58022,'bohan','sudo su - app','/home/app/shell/control.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-controlcs','ss':ss})
def controldep_19(seq):
       sun = ssh('192.168.3.19',58022,'bohan','sudo su - app','/home/app/shell/control.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-controlcs','ss':ss})


#############################################################qianduan###################################################
def registerqdtmtdep(req):   
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/tmt/'   
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage
	
def zzbstmtdep(req):                    #chage
       return render_to_response('auto/zzbs-tmt.html',{'title':'zzbs'})  #chage
def qdtmtdep_13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','/home/app/shell/qdtmt.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdtmtcs','ss':ss})       
def qdtmtdep_118(seq):
       sun = ssh('10.0.0.118',58022,'bohan','sudo su - app','tkdown')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdtmtcs','ss':ss})  

def registerqdtaobaodep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/taobao/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def zzbstaobaodep(req):                    #chage
       return render_to_response('auto/zzbs-taobao.html',{'title':'zzbs'})  #chage	
def qdtaobaodep_13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','/home/app/shell/qdtaobao.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdtaobaocs','ss':ss})       
def qdtaobaodep_118(seq):
       sun = ssh('10.0.0.118',58022,'bohan','sudo su - app','tkdown')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdtaobaocs','ss':ss})  
	   

def registerexttaobaodep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/ext/taobao/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage


def registerexttmtdep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/ext/tmt/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage

def ext_taobao_13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','/home/app/shell/ext/ext_taobao.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdextcs','ss':ss})

def cdn_exttaobao_post(seq):
       ss = do_post1("http://ext.taotaosou.com/browser-static/taobao/")
       return render_to_response('auto/cdn.html',{'title':'cdn','ss':ss})


def ext_tmt_13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','/home/app/shell/ext/ext_tmt.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdextcs','ss':ss})

def cdn_exttmt_post(seq):
       ss = do_post1("http://ext.taotaosou.com/browser-static/tmt/")
       return render_to_response('auto/cdn.html',{'title':'cdn','ss':ss})

def registerextstaobaodep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/exts/taobao/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage


def registerextstmtdep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/exts/tmt/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage

def exts_taobao_13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','/home/app/shell/exts/exts_taobao.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdextscs','ss':ss})


def exts_tmt_13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','/home/app/shell/exts/exts_tmt.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdextscs','ss':ss})


def registerqdqdstatdep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/qdstat/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def zzbsqdstatdep(req):                    #chage
       return render_to_response('auto/zzbs-qdstat.html',{'title':'zzbs'})  #chage      
def qdqdstatdep_86(seq):
       sun = ssh('10.0.0.86',58022,'bohan','sudo su - app','/home/app/shell/qdtts.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdqdstatcs','ss':ss})
def qdqdstatdep_7(seq):
       sun = ssh('10.0.0.7',58022,'bohan','sudo su - app','/home/app/rs-data.sh')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdqdstatcs','ss':ss})
def cdn_qdstat_post(seq):
       ss = do_post("http://img.taotaosou.cn/tts1-static/","http://img01.taotaosou.cn/tts1-static/","http://img02.taotaosou.cn/tts1-static/","http://img03.taotaosou.cn/tts1-static/")
       return render_to_response('auto/cdn.html',{'title':'cdn','ss':ss})

################################################################################################
def registerqdchaoji99dep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/qdchaoji99/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def zzbchaoji99dep(req):                    #chage
       return render_to_response('auto/zzbs-qdchaoji99.html',{'title':'zzbs'})  #chage      
def qdchaoji99dep_86(seq):
       sun = ssh('10.0.0.86',58022,'bohan','sudo su - app','/home/app/shell/qdchaoji99.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdchaoji99cs','ss':ss})
def qdchaoji99dep_7(seq):
       sun = ssh('10.0.0.7',58022,'bohan','sudo su - app','/home/app/rs-data.sh')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdchaoji99cs','ss':ss})

def cdn_qdchaoji99_post(seq):
       ss = do_post("http://img.taotaosou.cn/tts-99/","http://img01.taotaosou.cn/tts-99/","http://img02.taotaosou.cn/tts-99/","http://img03.taotaosou.cn/tts-99/")
       return render_to_response('auto/cdn.html',{'title':'cdn','ss':ss})

##############################################cmsproxy#######################
def registercmsproxydep (req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/cmsproxy/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage


def zzbscmsproxydep(req):                    #chage
 return render_to_response('auto/zzbs-cmsproxydep.html',{'title':'zzbs'})  #chage



def cmsprxoydep_22(seq):
       sun = ssh('10.0.0.22',58022,'bohan','sudo su - app','/home/app/shell/cmsproxy.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})
def cmsprxoydep_23(seq):
       sun = ssh('10.0.0.23',58022,'bohan','sudo su - app','/home/app/shell/cmsproxy.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})
def cmsprxoydep_83(seq):
       sun = ssh('192.168.3.83',58022,'bohan','sudo su - app','/home/app/shell/cmsproxy.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})
	   

def cmsproxydepdel(seq):
       sun = ssh('10.0.0.51',58022,'bohan','sudo su - bohan','rm -rf /nfsdata/bohan/sypt-super/cmsproxy/*.war')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-cmsproxycs','ss':ss})

############################################cms############################################
def registercmsdep (req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/cms/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage


def zzbscmsdep(req):                    #chage
 return render_to_response('auto/zzbs-cmsdep.html',{'title':'zzbs'})  #chage



def cmsdep_121(seq):
       sun = ssh('10.0.0.121',58022,'bohan','sudo su - app','/home/app/shell/cms.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-bijiacs','ss':ss})
######################################################################################
def registerseckill(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/seckill/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def autoseckill(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/seckill/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autoseckill','aa':aa})    #chage

def zzbsseckill(req):                    #chage
 return render_to_response('auto/zzbs-seckill.html',{'title':'zzbs'})  #chage


def seckilldep_80(seq):
       sun = ssh('192.168.3.80',58022,'bohan','sudo su - app','/home/app/shell/seckill.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'seckill','ss':ss})
def seckilldep_81(seq):
       sun = ssh('192.168.3.81',58022,'bohan','sudo su - app','/home/app/shell/seckill.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'seckill','ss':ss})
###########################################################################################
def registerpay_web(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/pay_web/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def autopay_web(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/pay_web/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autopay_web','aa':aa})    #chage

def zzbspay_web(req):                    #chage
 return render_to_response('auto/zzbs-pay_web.html',{'title':'zzbs'})  #chage


def pay_webdep_80(seq):
       sun = ssh('192.168.3.80',58022,'bohan','sudo su - app','/home/app/shell/pay_web.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'pay_web','ss':ss})
def pay_webdep_81(seq):
       sun = ssh('192.168.3.81',58022,'bohan','sudo su - app','/home/app/shell/pay_web.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'pay_web','ss':ss})


##############################################################################################
def registertrade_web(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/trade_web/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def autotrade_web(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/trade_web/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autotrade_web','aa':aa})    #chage

def zzbstrade_web(req):                    #chage
 return render_to_response('auto/zzbs-trade_web.html',{'title':'zzbs'})  #chage


def trade_webdep_80(seq):
       sun = ssh('192.168.3.80',58022,'bohan','sudo su - app','/home/app/shell/trade_web.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'trade_web','ss':ss})
def trade_webdep_81(seq):
       sun = ssh('192.168.3.81',58022,'bohan','sudo su - app','/home/app/shell/trade_web.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'trade_web','ss':ss})
#############################################################################################
def registertradeback(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/tradeback/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def autotradeback(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/tradeback/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autotradeback','aa':aa})    #chage

def zzbstradeback(req):                    #chage
 return render_to_response('auto/zzbs-tradeback.html',{'title':'zzbs'})  #chage


def tradebackdep_81(seq):
       sun = ssh('192.168.3.81',58022,'bohan','sudo su - app','/home/app/shell/tradeback.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tradeback','ss':ss})

############################################################################################
def registerp4p_mgr(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/p4p_mgr/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def autop4p_mgr(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/p4p_mgr/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autop4p_mgr','aa':aa})    #chage

def zzbsp4p_mgr(req):                    #chage
 return render_to_response('auto/zzbs-p4p_mgr.html',{'title':'zzbs'})  #chage


#def p4p_mgrdep_80(seq):
#       sun = ssh('192.168.3.80',58022,'bohan','sudo su - app','/home/app/shell/p4p_mgr.py')
#       ss = sun.split('\n')
#       return render_to_response('auto/dep-bijia.html',{'title':'p4p_mgr','ss':ss})
def p4p_mgrdep_11(seq):
       sun = ssh('192.168.3.11',58022,'bohan','sudo su - app','/home/app/shell/p4p_mgr.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'p4p_mgr','ss':ss})


#####################################################################################
def registerp4p_add(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/p4p_add/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def autop4p_add(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/p4p_add/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autop4p_add','aa':aa})    #chage

def zzbsp4p_add(req):                    #chage
 return render_to_response('auto/zzbs-p4p_add.html',{'title':'zzbs'})  #chage

def p4p_adddep_11(seq):
       sun = ssh('192.168.3.11',58022,'bohan','sudo su - app','/home/app/shell/p4p_add.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'p4p_add','ss':ss})

#######################################################################################
def registerp4p_dlsproxy(req):   #chage
    if req.method == 'POST':
        os.system('rm -rf  /nfsdata/bohan/sypt-super/p4p_dlsproxy/*.war')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/p4p_dlsproxy/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def p4p_dlsproxydep_11(seq):
       sun = ssh('192.168.3.11',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/bs.py p4p /home/app/tomcat-7.0.27-p4p-proxy-8780/ p4p-proxy-8780 /nfsdata/bohan/sypt-super/p4p_dlsproxy/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})
def p4p_dlsproxyhg_11(seq):
       sun = ssh('192.168.3.11',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/hg.py p4p /home/app/tomcat-7.0.27-p4p-proxy-8780/ p4p-proxy-8780')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})
def p4p_dlsproxylog_11(seq):
       sun = ssh('192.168.3.11',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-p4p-proxy-8780/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})

########################################################################################
def registercmsproxy_monitor(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/cmsproxy_monitor/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def autocmsproxy_monitor(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/cmsproxy_monitor/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autocmsproxy_monitor','aa':aa})    #chage

def zzbscmsproxy_monitor(req):                    #chage
 return render_to_response('auto/zzbs-cmsproxy_monitor.html',{'title':'zzbs'})  #chage

def cmsproxy_monitordep_24(seq):
       sun = ssh('192.168.3.24',58022,'bohan','sudo su - app','/home/app/shell/cmsproxy_monitor.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'cmsproxy_monitor','ss':ss})
##############################################chaoji99################
def registerchaoji99(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/chaoji99/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage


#autoconfig
def zzbschaoji99(req):                    #chage
 return render_to_response('auto/zzbs-chaoji99.html',{'title':'zzbs'})  #chage

def autochaoji99(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/chaoji99/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "chaoji99  is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'chaoji99','aa':aa})    #chage
 


def chaoji99_18(seq):
       sun = ssh('192.168.3.18',58022,'bohan','sudo su - app','/home/app/shell/chaoji99.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'p4p_mgr','ss':ss})
def chaoji99_19(seq):
       sun = ssh('192.168.3.19',58022,'bohan','sudo su - app','/home/app/shell/chaoji99.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'p4p_mgr','ss':ss})
def chaoji99_121(seq):
       sun = ssh('10.0.0.121',58022,'bohan','sudo su - app','/home/app/shell/chaoji99.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'p4p_mgr','ss':ss})
#######################################i.taoji99.com#########################################
def registerchaoji99_i(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/chaoji99_i/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage


#autoconfig
def zzbschaoji99_i(req):                    #chage
 return render_to_response('auto/zzbs-chaoji99_i.html',{'title':'zzbs'})  #chage

def autochaoji99_i(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/chaoji99_i/'         #chage
 auto = u'/home/app/auto_file/tts/tts-i-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-dapei.html',{'title':'autochaoji99_i','aa':aa})    #chage


def chaoji99_i_121(seq):
       sun = ssh('10.0.0.121',58022,'bohan','sudo su - app','/home/app/shell/chaoji99_i.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'p4p_mgr','ss':ss})	   
	   
def chaoji99_i_22(seq):
       sun = ssh('10.0.0.22',58022,'bohan','sudo su - app','/home/app/shell/chaoji99_i.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'p4p_mgr','ss':ss})

##########################################################################################################
def registerapp99(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/app99/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage


#autoconfig
def zzbsapp99(req):                    #chage
 return render_to_response('auto/zzbs-app99.html',{'title':'zzbs'})  #chage

def autoapp99(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/app99/'         #chage
 auto = u'/home/app/auto_file/tts/tts-tuan-autoconfig.properties'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-dapei.html',{'title':'autoapp99','aa':aa})    #chage

def app99_38(seq):
       sun = ssh('10.0.0.38',58022,'bohan','sudo su - app','/home/app/shell/app99.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'p4p_mgr','ss':ss})
def app99_46(seq):
       sun = ssh('10.0.0.46',58022,'bohan','sudo su - app','/home/app/shell/app99.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'p4p_mgr','ss':ss})

 
#########################################################################################

def registerqdtts_kmeyedep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/qdtts-kmeye/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def zzbtts_kmeyedep(req):                    #chage
       return render_to_response('auto/zzbs-qdtts_kmeye.html',{'title':'zzbs'})  #chage      
def qdtts_kmeyedep_86(seq):
       sun = ssh('10.0.0.86',58022,'bohan','sudo su - app','/home/app/shell/tts-kmeye.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log_qdtts_kmeyecs','ss':ss})
def qdtts_kmeyedep_7(seq):
       sun = ssh('10.0.0.7',58022,'bohan','sudo su - app','/home/app/rs-data.sh')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log_qdtts_kmeyecs','ss':ss})

def cdn_kmeyedep_post(seq):
       ss = do_post("http://img.taotaosou.cn/tts-kmeye/","http://img01.taotaosou.cn/tts-kmeye/","http://img02.taotaosou.cn/tts-kmeye/","http://img03.taotaosou.cn/tts-kmeye/")
       return render_to_response('auto/cdn.html',{'title':'cdn','ss':ss})



##############################################################################################
def registerqly(req):   #chage
    if req.method == 'POST':
        os.system('rm -rf  /nfsdata/bohan/sypt-super/qly/*.war')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qly/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



#def autoqly(req):          #chage
# dir = u'/nfsdata/bohan/sypt-super/qly/'         #chage
# auto = u'xxx'
# list = os.listdir(dir)
# for line in list:
#     filepath = os.path.join(dir,line)
#     if os.path.isfile(filepath):
#         WAR = filepath
## AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
# aa = "tts_client is not autoconfig, complete copy!!!"
# BAOM = os.path.basename(WAR)
# for line in list:
#     filepath = os.path.join(dir,line)
#     if os.path.isdir(filepath):
#         shutil.copyfile(WAR,filepath+'/'+BAOM)
#         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
# os.remove(WAR)
# return render_to_response('auto/auto-back.html',{'title':'autoqly','aa':aa})    #chage
#
def zzbsqly(req):                    #chage
 return render_to_response('auto/zzbs-qly.html',{'title':'zzbs'})  #chage

def qlydep_39(seq):
       sun = ssh('192.168.3.39',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/bs.py qly /home/app/tomcat-7.0.27-tts_qly-8480/ tts_qly-8480  /nfsdata/bohan/sypt-super/qly/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})

def qlydep_40(seq):
       sun = ssh('192.168.3.40',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/bs.py qly /home/app/tomcat-7.0.27-tts_qly-8480/ tts_qly-8480  /nfsdata/bohan/sypt-super/qly/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})


def qlyhg_39(seq):
       sun = ssh('192.168.3.39',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/hg.py qly /home/app/tomcat-7.0.27-tts_qly-8480/ tts_qly-8480')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})

def qlyhg_40(seq):
       sun = ssh('192.168.3.40',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/hg.py qly /home/app/tomcat-7.0.27-tts_qly-8480/ tts_qly-8480')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})

def qlylog_39(seq):
       sun = ssh('192.168.3.39',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-tts_qly-8480/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})

def qlylog_40(seq):
       sun = ssh('192.168.3.40',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-tts_qly-8480/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})




def qlydep_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/bs.py qly /home/app/tomcat-7.0.27-tts_qly-8480/ tts_qly-8480  /nfsdata/bohan/sypt-super/qly/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})

def qlyhg_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/hg.py qly /home/app/tomcat-7.0.27-tts_qly-8480/ tts_qly-8480')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})

def qlylog_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-tts_qly-8480/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly','ss':ss})


##########################################################################################
def registerqdv7dep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/qdv7/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def zzbv7dep(req):                    #chage
       return render_to_response('auto/zzbs-qdv7.html',{'title':'zzbs'})  #chage      
def qdv7dep_86(seq):
       sun = ssh('10.0.0.86',58022,'bohan','sudo su - app','/home/app/shell/v7.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log_qdv7cs','ss':ss})
def qdv7dep_7(seq):
       sun = ssh('10.0.0.7',58022,'bohan','sudo su - app','/home/app/rs-data.sh')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log_qdv7cs','ss':ss})

def cdn_qdv7_post(seq):
       ss = do_post("http://img.taotaosou.cn/tts-mobile/v7/","http://img01.taotaosou.cn/tts-mobile/v7/","http://img02.taotaosou.cn/tts-mobile/v7/","http://img03.taotaosou.cn/tts-mobile/v7/")
       return render_to_response('auto/cdn.html',{'title':'cdn','ss':ss})

####################################################################################
def registersso(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/sso/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage



def autosso(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/sso/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autosso','aa':aa})    #chage

def zzbssso(req):                    #chage
 return render_to_response('auto/zzbs-sso.html',{'title':'zzbs'})  #chage

def ssodep_33(seq):
       sun = ssh('192.168.3.33',58022,'bohan','sudo su - app','/home/app/shell/sso.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'sso','ss':ss})

def ssodep_34(seq):
       sun = ssh('192.168.3.34',58022,'bohan','sudo su - app','/home/app/shell/sso.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'sso','ss':ss})
#################################################################################################

def registerlsjpassport(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsj_passport/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage


def autolsjpassport(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/lsj_passport/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autolsjpassport','aa':aa})    #chage

def zzbslsjpassport(req):                    #chage
 return render_to_response('auto/zzbslsjpassport.html',{'title':'zzbs'})  #chage

def lsjpassportdep_33(seq):
       sun = ssh('192.168.3.33',58022,'bohan','sudo su - app','/home/app/shell/lsj_passport.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'lsjpassport','ss':ss})

def lsjpassportdep_34(seq):
       sun = ssh('192.168.3.34',58022,'bohan','sudo su - app','/home/app/shell/lsj_passport.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'lsjpassport','ss':ss})	   
################################################################################
def registerchaoji99passport(req):   #chage
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/chaoji99_passport/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage


def autochaoji99passport(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/chaoji99_passport/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'autochaoji99passport','aa':aa})    #chage

def zzbschaoji99passport(req):                    #chage
 return render_to_response('auto/zzbschaoji99passport.html',{'title':'zzbs'})  #chage

def chaoji99passportdep_33(seq):
       sun = ssh('192.168.3.33',58022,'bohan','sudo su - app','/home/app/shell/chaoji99_passport.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'chaoji99passport','ss':ss})

def chaoji99passportdep_34(seq):
       sun = ssh('192.168.3.34',58022,'bohan','sudo su - app','/home/app/shell/chaoji99_passport.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'chaoji99passport','ss':ss})


def registerlsjssodep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsjsso/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage

def autolsj_sso(req):          #chage
 dir = u'/nfsdata/bohan/sypt-super/lsjsso/'         #chage
 auto = u'xxx'
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
# AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 aa = "tts_client is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return render_to_response('auto/auto-back.html',{'title':'lsjsso','aa':aa})    #chage

def zzbslsjssodep(req):                    #chage
       return render_to_response('auto/zzbs-lsjsso.html',{'title':'zzbs'})  #chage      
def lsjssodep_106(seq):
       sun = ssh('192.168.3.106',58022,'bohan','sudo su - app','/home/app/shell/lsjsso.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdlsjssocs','ss':ss})

def autolizi(dir,auto):       
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 AUTOCONFIG= os.popen("/bin/autoconfig -u %s %s" % (auto,WAR)).read().strip('\n')
 os.popen("chmod -R 777 %s" % WAR).read().strip('\n')
 aa = AUTOCONFIG.split('\n')
 return aa


def noautolizi(dir):     
 global WAR 
 list = os.listdir(dir)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isfile(filepath):
         WAR = filepath
 aa = "JAVA is not autoconfig, complete copy!!!"
 BAOM = os.path.basename(WAR)
 for line in list:
     filepath = os.path.join(dir,line)
     if os.path.isdir(filepath):
         shutil.copyfile(WAR,filepath+'/'+BAOM)
         os.popen("chmod -R 777 %s/%s" % (filepath,BAOM)).read().strip('\n')
 os.remove(WAR)
 return aa


######################################################################################################

def moldcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/mold/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/mold/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  

def appcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/p4papp/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/p4papp/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})

def engcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/p4peng/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/p4peng/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})


def moldauto(req):
     aa = autolizi('/nfsdata/bohan/sypt-super/mold/','/home/app/auto_file/show/mold.properties')
     return render_to_response('auto/auto.html',{'title':'www','aa':aa})

def appauto(req):
     aa = autolizi('/nfsdata/bohan/sypt-super/p4papp/','/home/app/auto_file/show/app.properties')
     return render_to_response('auto/auto.html',{'title':'www','aa':aa})

def engauto(req):
     aa = autolizi('/nfsdata/bohan/sypt-super/p4peng/','/home/app/auto_file/show/engine.properties')
     return render_to_response('auto/auto.html',{'title':'www','aa':aa})


def moldep_12(seq):
       sun = ssh('192.168.3.12',58022,'bohan','sudo su - app','/home/app/shell/mold/molddep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldhg_12(seq):
       sun = ssh('192.168.3.12',58022,'bohan','sudo su - app','/home/app/shell/mold/moldhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldlog_12(seq):
       sun = ssh('192.168.3.12',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-mold-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def moldep_13(seq):
       sun = ssh('192.168.3.13',58022,'bohan','sudo su - app','/home/app/shell/mold/molddep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldhg_13(seq):
       sun = ssh('192.168.3.13',58022,'bohan','sudo su - app','/home/app/shell/mold/moldhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldlog_13(seq):
       sun = ssh('192.168.3.13',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-mold-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def moldep_14(seq):
       sun = ssh('192.168.3.14',58022,'bohan','sudo su - app','/home/app/shell/mold/molddep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldhg_14(seq):
       sun = ssh('192.168.3.14',58022,'bohan','sudo su - app','/home/app/shell/mold/moldhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldlog_14(seq):
       sun = ssh('192.168.3.14',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-mold-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def moldep_24(seq):
       sun = ssh('192.168.3.24',58022,'bohan','sudo su - app','/home/app/shell/mold/molddep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldhg_24(seq):
       sun = ssh('192.168.3.24',58022,'bohan','sudo su - app','/home/app/shell/mold/moldhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldlog_24(seq):
       sun = ssh('192.168.3.24',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-mold-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def moldep_25(seq):
       sun = ssh('192.168.3.25',58022,'bohan','sudo su - app','/home/app/shell/mold/molddep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldhg_25(seq):
       sun = ssh('192.168.3.25',58022,'bohan','sudo su - app','/home/app/shell/mold/moldhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldlog_25(seq):
       sun = ssh('192.168.3.25',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-mold-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def moldep_29(seq):
       sun = ssh('192.168.3.29',58022,'bohan','sudo su - app','/home/app/shell/mold/molddep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldhg_29(seq):
       sun = ssh('192.168.3.29',58022,'bohan','sudo su - app','/home/app/shell/mold/moldhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldlog_29(seq):
       sun = ssh('192.168.3.29',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-mold-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def moldep_32(seq):
       sun = ssh('192.168.3.32',58022,'bohan','sudo su - app','/home/app/shell/mold/molddep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldhg_32(seq):
       sun = ssh('192.168.3.32',58022,'bohan','sudo su - app','/home/app/shell/mold/moldhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldlog_32(seq):
       sun = ssh('192.168.3.32',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-mold-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def moldep_181(seq):
       sun = ssh('192.168.3.181',58022,'bohan','sudo su - app','/home/app/shell/mold/molddep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldhg_181(seq):
       sun = ssh('192.168.3.181',58022,'bohan','sudo su - app','/home/app/shell/mold/moldhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldlog_181(seq):
       sun = ssh('192.168.3.181',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-mold-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})



def moldep_8(seq):
       sun = ssh('10.0.0.8',58022,'bohan','sudo su - app','/home/app/shell/mold/molddep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldhg_8(seq):
       sun = ssh('10.0.0.8',58022,'bohan','sudo su - app','/home/app/shell/mold/moldhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def moldlog_8(seq):
       sun = ssh('10.0.0.8',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-mold-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def appep_12(seq):
       sun = ssh('192.168.3.12',58022,'bohan','sudo su - app','/home/app/shell/app/appdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def apphg_12(seq):
       sun = ssh('192.168.3.12',58022,'bohan','sudo su - app','/home/app/shell/app/apphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def applog_12(seq):
       sun = ssh('192.168.3.12',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-app-8180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def appep_13(seq):
       sun = ssh('192.168.3.13',58022,'bohan','sudo su - app','/home/app/shell/app/appdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def apphg_13(seq):
       sun = ssh('192.168.3.13',58022,'bohan','sudo su - app','/home/app/shell/app/apphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def applog_13(seq):
       sun = ssh('192.168.3.13',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-app-8180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def appep_14(seq):
       sun = ssh('192.168.3.14',58022,'bohan','sudo su - app','/home/app/shell/app/appdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def apphg_14(seq):
       sun = ssh('192.168.3.14',58022,'bohan','sudo su - app','/home/app/shell/app/apphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def applog_14(seq):
       sun = ssh('192.168.3.14',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-app-8180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def appep_181(seq):
       sun = ssh('192.168.3.181',58022,'bohan','sudo su - app','/home/app/shell/app/appdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def apphg_181(seq):
       sun = ssh('192.168.3.181',58022,'bohan','sudo su - app','/home/app/shell/app/apphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def applog_181(seq):
       sun = ssh('192.168.3.181',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-app-8180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def appep_68(seq):
       sun = ssh('10.0.0.68',58022,'bohan','sudo su - app','/home/app/shell/app/appdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def apphg_68(seq):
       sun = ssh('10.0.0.68',58022,'bohan','sudo su - app','/home/app/shell/app/apphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def applog_68(seq):
       sun = ssh('10.0.0.68',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-app-8180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def appep_85(seq):
       sun = ssh('10.0.0.85',58022,'bohan','sudo su - app','/home/app/shell/app/appdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def apphg_85(seq):
       sun = ssh('10.0.0.85',58022,'bohan','sudo su - app','/home/app/shell/app/apphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def applog_85(seq):
       sun = ssh('10.0.0.85',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-app-8180/' )
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def appep_82(seq):
       sun = ssh('192.168.3.82',58022,'bohan','sudo su - app','/home/app/shell/app/appdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def apphg_82(seq):
       sun = ssh('192.168.3.82',58022,'bohan','sudo su - app','/home/app/shell/app/apphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def applog_82(seq):
       sun = ssh('192.168.3.82',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-app-8180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})



def appep_97(seq):
       sun = ssh('192.168.3.97',58022,'bohan','sudo su - app','/home/app/shell/app/appdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def apphg_97(seq):
       sun = ssh('192.168.3.97',58022,'bohan','sudo su - app','/home/app/shell/app/apphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def applog_97(seq):
       sun = ssh('192.168.3.97',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-app-8180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def appep_160(seq):
       sun = ssh('10.0.0.160',58022,'bohan','sudo su - app','/home/app/shell/app/appdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def apphg_160(seq):
       sun = ssh('10.0.0.160',58022,'bohan','sudo su - app','/home/app/shell/app/apphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def applog_160(seq):
       sun = ssh('10.0.0.160',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-app-8180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def appep_161(seq):
       sun = ssh('10.0.0.161',58022,'bohan','sudo su - app','/home/app/shell/app/appdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def apphg_161(seq):
       sun = ssh('10.0.0.161',58022,'bohan','sudo su - app','/home/app/shell/app/apphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def applog_161(seq):
       sun = ssh('10.0.0.161',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-app-8180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})














def engdep_12(seq):
       sun = ssh('192.168.3.12',58022,'bohan','sudo su - app','/home/app/shell/eng/engdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def enghg_12(seq):
       sun = ssh('192.168.3.12',58022,'bohan','sudo su - app','/home/app/shell/eng/enghg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def englog_12(seq):
       sun = ssh('192.168.3.12',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-eng-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def engdep_13(seq):
       sun = ssh('192.168.3.13',58022,'bohan','sudo su - app','/home/app/shell/eng/engdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def enghg_13(seq):
       sun = ssh('192.168.3.13',58022,'bohan','sudo su - app','/home/app/shell/eng/enghg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def englog_13(seq):
       sun = ssh('192.168.3.13',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-eng-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def engdep_14(seq):
       sun = ssh('192.168.3.14',58022,'bohan','sudo su - app','/home/app/shell/eng/engdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def enghg_14(seq):
       sun = ssh('192.168.3.14',58022,'bohan','sudo su - app','/home/app/shell/eng/enghg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def englog_14(seq):
       sun = ssh('192.168.3.14',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-eng-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def engdep_181(seq):
       sun = ssh('192.168.3.181',58022,'bohan','sudo su - app','/home/app/shell/eng/engdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def enghg_181(seq):
       sun = ssh('192.168.3.181',58022,'bohan','sudo su - app','/home/app/shell/eng/enghg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def englog_181(seq):
       sun = ssh('192.168.3.181',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-eng-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def engdep_85(seq):
       sun = ssh('10.0.0.85',58022,'bohan','sudo su - app','/home/app/shell/eng/engdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def enghg_85(seq):
       sun = ssh('10.0.0.85',58022,'bohan','sudo su - app','/home/app/shell/eng/enghg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def englog_85(seq):
       sun = ssh('10.0.0.85',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-eng-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def engdep_82(seq):
       sun = ssh('192.168.3.82',58022,'bohan','sudo su - app','/home/app/shell/eng/engdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def enghg_82(seq):
       sun = ssh('192.168.3.82',58022,'bohan','sudo su - app','/home/app/shell/eng/enghg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def englog_82(seq):
       sun = ssh('192.168.3.82',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-eng-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def engdep_23(seq):
       sun = ssh('192.168.3.23',58022,'bohan','sudo su - app','/home/app/shell/eng/engdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def enghg_23(seq):
       sun = ssh('192.168.3.23',58022,'bohan','sudo su - app','/home/app/shell/eng/enghg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def englog_23(seq):
       sun = ssh('192.168.3.23',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-eng-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def engdep_26(seq):
       sun = ssh('192.168.3.26',58022,'bohan','sudo su - app','/home/app/shell/eng/engdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def enghg_26(seq):
       sun = ssh('192.168.3.26',58022,'bohan','sudo su - app','/home/app/shell/eng/enghg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def englog_26(seq):
       sun = ssh('192.168.3.26',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-eng-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def engdep_8(seq):
       sun = ssh('10.0.0.8',58022,'bohan','sudo su - app','/home/app/shell/eng/engdep.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def enghg_8(seq):
       sun = ssh('10.0.0.8',58022,'bohan','sudo su - app','/home/app/shell/eng/enghg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def englog_8(seq):
       sun = ssh('10.0.0.8',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-6.0.35-p4p-eng-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})




def haolingzuicp(req):
    if req.method == 'POST':
        #os.system('rm -rf /nfsdata/bohan/sypt-super/lsj_haolingzui/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsj_haolingzui/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})


def haolingzuiauto(req):
     aa = noautolizi('/nfsdata/bohan/sypt-super/lsj_haolingzui/')
     return render_to_response('auto/noauto.html',{'title':'www','aa':aa})
	 
	 
def haolingzuidep_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/lsj_haolingzui.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def haolingzuihg_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/lsj_haolingzuihg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def haolingzuilog_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-lsj_haolingzui-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def haolingzuidep_44(seq):
       sun = ssh('192.168.3.44',58022,'bohan','sudo su - app','/home/app/shell/lsj_haolingzui.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def haolingzuihg_44(seq):
       sun = ssh('192.168.3.44',58022,'bohan','sudo su - app','/home/app/shell/lsj_haolingzuihg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def haolingzuilog_44(seq):
       sun = ssh('192.168.3.44',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-lsj_haolingzui-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


#####################################
def spcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/sp/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/sp/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})
	


def spdep_187(seq):
       sun = ssh('10.0.0.187',58022,'bohan','sudo su - app','/home/app/shell/sp.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	   

	   
def spdep_204(seq):
       sun = ssh('10.0.0.204',58022,'bohan','sudo su - app','/home/app/shell/sp.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	   
def spdep_225(seq):
       sun = ssh('10.0.0.225',58022,'bohan','sudo su - app','/home/app/shell/sp.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	   
def spdep_226(seq):
       sun = ssh('10.0.0.226',58022,'bohan','sudo su - app','/home/app/shell/sp.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	   
def spdep_227(seq):
       sun = ssh('10.0.0.227',58022,'bohan','sudo su - app','/home/app/shell/sp.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	   
def spdep_228(seq):
       sun = ssh('10.0.0.228',58022,'bohan','sudo su - app','/home/app/shell/sp.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	   
def spdep_229(seq):
       sun = ssh('10.0.0.229',58022,'bohan','sudo su - app','/home/app/shell/sp.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	   
def spdep_207(seq):
       sun = ssh('10.0.0.207',58022,'bohan','sudo su - app','/home/app/shell/sp.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	   
def spdep_190(seq):
       sun = ssh('10.0.0.190',58022,'bohan','sudo su - app','/home/app/shell/sp.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	
def spdep_199(seq):
       sun = ssh('10.0.0.199',58022,'bohan','sudo su - app','/home/app/shell/sp.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def registerqdhlz(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/qdtts-haolingzui/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form}) 



def qdhlzmdep_86(seq):
       sun = ssh('10.0.0.86',58022,'bohan','sudo su - app','/home/app/shell/tts-hlz.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdhlzmcs','ss':ss})
def qdhlzmdep_7(seq):
       sun = ssh('10.0.0.7',58022,'bohan','sudo su - app','/home/app/rs-data.sh')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdhlzmcs','ss':ss})   
################################################################################################
class upForm(forms.Form):
    headImg  = forms.FileField()

def regist(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/upload/*')
        uf = upForm(req.POST,req.FILES)
        if uf.is_valid():
            print uf.cleaned_data['headImg'].name
            print uf.cleaned_data['headImg'].size
            fp = file('/nfsdata/bohan/upload/'+uf.cleaned_data['headImg'].name, 'wb')
            s = uf.cleaned_data['headImg'].read()
            fp.write(s)
            fp.close()
           # return render_to_response('auto/dep-bijia.html',{'title':'tts'})
#            return HttpResponse('OK')
    else:
        uf = upForm()
    return render_to_response('regist.html',{'uf':uf})



def mlz_m_A13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','\cp /nfsdata/bohan/upload/* /home/app/nginx/html/haolingzui/activity/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})




def registsb(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/upload/*')
        uf = upForm(req.POST,req.FILES)
        if uf.is_valid():
            fp = file('/nfsdata/bohan/uploadsb/'+uf.cleaned_data['headImg'].name, 'wb')
            s = uf.cleaned_data['headImg'].read()
            fp.write(s)
            fp.close()
    else:
        uf = upForm()
    return render_to_response('registsb.html',{'uf':uf})



def mlz_sb_A13(seq):
       sun = ssh('192.168.3.36',58022,'bohan','sudo su - app','\cp /nfsdata/bohan/uploadsb/* /home/app/nginx/html/bucai/extension/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})



def registbd(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/uploadbd/*')
        uf = upForm(req.POST,req.FILES)
        if uf.is_valid():
            fp = file('/nfsdata/bohan/uploadbd/'+uf.cleaned_data['headImg'].name, 'wb')
            s = uf.cleaned_data['headImg'].read()
            fp.write(s)
            fp.close()
    else:
        uf = upForm()
    return render_to_response('auto/zzbs-qdbd.html',{'uf':uf})

def tts_bd_A13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','\cp /nfsdata/bohan/uploadbd/* /home/app/nginx/html/exts/browser-static/bd/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	   


def registbdtest(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/uploadbdtest/*')
        uf = upForm(req.POST,req.FILES)
        if uf.is_valid():
            fp = file('/nfsdata/bohan/uploadbdtest/'+uf.cleaned_data['headImg'].name, 'wb')
            s = uf.cleaned_data['headImg'].read()
            fp.write(s)
            fp.close()
    else:
        uf = upForm()
    return render_to_response('auto/zzbs-qdbdtest.html',{'uf':uf})

def tts_bd_A13test(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','\cp /nfsdata/bohan/uploadbdtest/* /home/app/nginx/html/exts/browser-static/bdtest/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})



#############################################################################################
def hlz_seckillcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/lsj_hlz_seckill/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsj_hlz_seckill/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})




def hlz_seckilldep_49(seq):
       sun = ssh('192.168.3.49',58022,'bohan','sudo su - app','/home/app/shell/hlz_seckill.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_seckillhg_49(seq):
       sun = ssh('192.168.3.49',58022,'bohan','sudo su - app','/home/app/shell/hlz_seckillhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_seckilllog_49(seq):
       sun = ssh('192.168.3.49',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_seckill-8480/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_seckilldep_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/home/app/shell/hlz_seckill.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_seckillhg_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/home/app/shell/hlz_seckillhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_seckilllog_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_seckill-8480/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_tradecp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/lsj_hlz_trade/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsj_hlz_trade/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})




def hlz_tradedep_49(seq):
       sun = ssh('192.168.3.49',58022,'bohan','sudo su - app','/home/app/shell/hlz_trade.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_tradehg_49(seq):
       sun = ssh('192.168.3.49',58022,'bohan','sudo su - app','/home/app/shell/hlz_tradehg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_tradelog_49(seq):
       sun = ssh('192.168.3.49',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_trade_web-6280/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_tradedep_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_trade.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_tradehg_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_tradehg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_tradelog_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_trade_web-6280/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_cmsproxycp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/lsj_hlz_cmsproxy/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsj_hlz_cmsproxy/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})




def hlz_cmsproxydep_49(seq):
       sun = ssh('192.168.3.49',58022,'bohan','sudo su - app','/home/app/shell/hlz_cmsproxy.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_cmsproxyhg_49(seq):
       sun = ssh('192.168.3.49',58022,'bohan','sudo su - app','/home/app/shell/hlz_cmsproxyhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_cmsproxylog_49(seq):
       sun = ssh('192.168.3.49',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_cmsproxy-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_cmsproxydep_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_cmsproxy.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_cmsproxyhg_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_cmsproxyhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_cmsproxylog_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_cmsproxy-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def hlz_cmsproxydep_19(seq):
       sun = ssh('192.168.3.19',58022,'bohan','sudo su - app','/home/app/shell/hlz_cmsproxy.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_cmsproxyhg_19(seq):
       sun = ssh('192.168.3.19',58022,'bohan','sudo su - app','/home/app/shell/hlz_cmsproxyhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_cmsproxylog_19(seq):
       sun = ssh('192.168.3.19',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-hlz_cmsproxy-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def hlz_cmsproxydep_33(seq):
       sun = ssh('192.168.3.33',58022,'bohan','sudo su - app','/home/app/shell/hlz_cmsproxy.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_cmsproxyhg_33(seq):
       sun = ssh('192.168.3.33',58022,'bohan','sudo su - app','/home/app/shell/hlz_cmsproxyhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_cmsproxylog_33(seq):
       sun = ssh('192.168.3.33',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-hlz_cmsproxy-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def hlz_paycp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/lsj_hlz_pay/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsj_hlz_pay/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})



def hlz_paydep_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/home/app/shell/hlz_pay.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_payhg_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/home/app/shell/hlz_payhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_paylog_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_payweb-6380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_paydep_46(seq):
       sun = ssh('192.168.3.46',58022,'bohan','sudo su - app','/home/app/shell/hlz_pay.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_payhg_46(seq):
       sun = ssh('192.168.3.46',58022,'bohan','sudo su - app','/home/app/shell/hlz_payhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_paylog_46(seq):
       sun = ssh('192.168.3.46',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_payweb-6380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})
	   
def hlz_passportcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/lsj_hlz_passport/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsj_hlz_passport/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})




def hlz_passportdep_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/home/app/shell/hlz_passport.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_passporthg_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/home/app/shell/hlz_passporthg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_passportlog_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-hlz_passport-8780/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_passportdep_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_passport.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_passporthg_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_passporthg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_passportlog_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-hlz_passport-8780/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_sellercp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/lsj_hlz_seller/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsj_hlz_seller/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})


#def hlz_sellerauto(req):
#     aa = noautolizi('/nfsdata/bohan/sypt-super/lsj_hlz_seller/')
#     return render_to_response('auto/noauto.html',{'title':'www','aa':aa})


def hlz_sellerdep_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/home/app/shell/hlz_seller.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_sellerhg_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/home/app/shell/hlz_sellerhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_sellerlog_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','' % t)
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_sellerdep_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_seller.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_sellerhg_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_sellerhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_sellerlog_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py   /home/app/tomcat-7.0.27-hlz_seller-8980/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})







def hlz_sellerdep_18(seq):
       sun = ssh('192.168.3.18',58022,'bohan','sudo su - app','/home/app/shell/hlz_seller.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_sellerhg_18(seq):
       sun = ssh('192.168.3.18',58022,'bohan','sudo su - app','/home/app/shell/hlz_sellerhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_sellerlog_18(seq):
       sun = ssh('192.168.3.18',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py   /home/app/tomcat-7.0.27-hlz_seller-8980/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})







def hlz_cmscp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/lsj_hlz_cms/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsj_hlz_cms/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})


#def hlz_cmsauto(req):
#     aa = noautolizi('/nfsdata/bohan/sypt-super/lsj_hlz_cms/')
#     return render_to_response('auto/noauto.html',{'title':'www','aa':aa})


def hlz_cmsdep_106(seq):
       sun = ssh('192.168.3.106',58022,'bohan','sudo su - app','/home/app/shell/hlz_cms.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_cmshg_106(seq):
       sun = ssh('192.168.3.106',58022,'bohan','sudo su - app','/home/app/shell/hlz_cmshg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_cmslog_106(seq):
       sun = ssh('192.168.3.106',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_cms-9480/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_mcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/lsj_hlz_m/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/lsj_hlz_m/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})


#def hlz_mauto(req):
#     aa = noautolizi('/nfsdata/bohan/sypt-super/lsj_hlz_m/')
#     return render_to_response('auto/noauto.html',{'title':'www','aa':aa})


def hlz_mdep_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/home/app/shell/hlz_m.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_mhg_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/home/app/shell/hlz_mhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_mlog_64(seq):
       sun = ssh('192.168.3.64',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_m-8680/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_mdep_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_m.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_mhg_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_mhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_mlog_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_m-8680/ ')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def qly_plugincp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/qly_plugin/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qly_plugin/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})





def qly_plugindep_32(seq):
       sun = ssh('192.168.3.32',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/bs.py qly_plugin /home/app/tomcat-7.0.27-qly_plugin-8480/ qly_plugin-8480 /nfsdata/bohan/sypt-super/qly_plugin/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_pluginhg_32(seq):
       sun = ssh('192.168.3.32',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/hg.py qly /home/app/tomcat-7.0.27-qly_plugin-8480/ qly_plugin-8480')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_pluginlog_32(seq):
       sun = ssh('192.168.3.32',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-qly_plugin-8480/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


	   
	   
def qly_plugindep_36(seq):
       sun = ssh('192.168.3.36',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/bs.py qly_plugin /home/app/tomcat-7.0.27-qly_plugin-8480/ qly_plugin-8480 /nfsdata/bohan/sypt-super/qly_plugin/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_pluginhg_36(seq):
       sun = ssh('192.168.3.36',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/hg.py qly /home/app/tomcat-7.0.27-qly_plugin-8480/ qly_plugin-8480')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_pluginlog_36(seq):
       sun = ssh('192.168.3.36',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-qly_plugin-8480/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def qly_plugindep_80(seq):
       sun = ssh('192.168.3.80',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/bs.py qly_plugin /home/app/tomcat-7.0.27-qly_plugin-8480/ qly_plugin-8480 /nfsdata/bohan/sypt-super/qly_plugin/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_pluginhg_80(seq):
       sun = ssh('192.168.3.80',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/hg.py qly /home/app/tomcat-7.0.27-qly_plugin-8480/ qly_plugin-8480')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_pluginlog_80(seq):
       sun = ssh('192.168.3.80',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-qly_plugin-8480/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})




def qly_plugindep_23(seq):
       sun = ssh('10.0.0.23',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/bs.py qly_plugin /home/app/tomcat-7.0.27-qly_plugin-8480/ qly_plugin-8480 /nfsdata/bohan/sypt-super/qly_plugin/')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_pluginhg_23(seq):
       sun = ssh('10.0.0.23',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/hg.py qly /home/app/tomcat-7.0.27-qly_plugin-8480/ qly_plugin-8480')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_pluginlog_23(seq):
       sun = ssh('10.0.0.23',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-qly_plugin-8480/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def hlz_lotterycp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/hlz_lottery/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/hlz_lottery/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})





def hlz_lotterydep_17(seq):
       sun = ssh('192.168.3.17',58022,'bohan','sudo su - app','/home/app/shell/hlz_lottery.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_lotteryhg_17(seq):
       sun = ssh('192.168.3.17',58022,'bohan','sudo su - app','/home/app/shell/hlz_lotteryhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_lotterylog_17(seq):
       sun = ssh('192.168.3.17',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-hlz_lottery-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def hlz_lotterydep_18(seq):
       sun = ssh('192.168.3.18',58022,'bohan','sudo su - app','/home/app/shell/hlz_lottery.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_lotteryhg_18(seq):
       sun = ssh('192.168.3.18',58022,'bohan','sudo su - app','/home/app/shell/hlz_lotteryhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_lotterylog_18(seq):
       sun = ssh('192.168.3.18',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-hlz_lottery-8380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})
	   

def brcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/br/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/br/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})


def brdep1_183(seq):
       sun = ssh('10.0.0.183',58022,'bohan','sudo su - app','/home/app/shell/tts-browser-plugin.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
def bjrestart_183(seq):
       sun = ssh('10.0.0.183',58022,'bohan','sudo su - app','/home/app/shell/bjrestart.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	
   
def brdep1_94(seq):
       sun = ssh('192.168.3.94',58022,'bohan','sudo su - app','/home/app/shell/tts-browser-plugin.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
def bjrestart_94(seq):
       sun = ssh('192.168.3.94',58022,'bohan','sudo su - app','/home/app/shell/bjrestart.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})



def brdep1_83(seq):
       sun = ssh('192.168.3.83',58022,'bohan','sudo su - app','/home/app/shell/tts-browser-plugin.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
def bjrestart_83(seq):
       sun = ssh('192.168.3.83',58022,'bohan','sudo su - app','/home/app/shell/bjrestart.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})



def brdep1_48(seq):
       sun = ssh('10.0.0.48',58022,'bohan','sudo su - app','/home/app/shell/tts-browser-plugin.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
def bjrestart_48(seq):
       sun = ssh('10.0.0.48',58022,'bohan','sudo su - app','/home/app/shell/bjrestart.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})


def brdep1_51(seq):
       sun = ssh('10.0.0.51',58022,'bohan','sudo su - app','/home/app/shell/tts-browser-plugin.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
def bjrestart_51(seq):
       sun = ssh('10.0.0.51',58022,'bohan','sudo su - app','/home/app/shell/bjrestart.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_bbscp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/qlybbs/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qlybbs/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})




def qly_bbsdep_39(seq):
       sun = ssh('192.168.3.39',58022,'bohan','sudo su - app','/home/app/shell/qly_bbs.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_bbshg_39(seq):
       sun = ssh('192.168.3.39',58022,'bohan','sudo su - app','/home/app/shell/qly_bbshg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_bbslog_39(seq):
       sun = ssh('192.168.3.39',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-qly_bbs-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def qly_bbsdep_40(seq):
       sun = ssh('192.168.3.40',58022,'bohan','sudo su - app','/home/app/shell/qly_bbs.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_bbshg_40(seq):
       sun = ssh('192.168.3.40',58022,'bohan','sudo su - app','/home/app/shell/qly_bbshg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def qly_bbslog_40(seq):
       sun = ssh('192.168.3.40',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-qly_bbs-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def p4p_ipcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/p4pip/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/p4pip/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})




def p4p_ipdep_48(seq):
       sun = ssh('10.0.0.48',58022,'bohan','sudo su - app','/home/app/shell/p4p_ip.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def p4p_iphg_48(seq):
       sun = ssh('10.0.0.48',58022,'bohan','sudo su - app','/home/app/shell/p4p_iphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def p4p_iplog_48(seq):
       sun = ssh('10.0.0.48',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-p4p_ip-7180/' )
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def p4p_ipdep_94(seq):
       sun = ssh('192.168.3.94',58022,'bohan','sudo su - app','/home/app/shell/p4p_ip.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def p4p_iphg_94(seq):
       sun = ssh('192.168.3.94',58022,'bohan','sudo su - app','/home/app/shell/p4p_iphg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def p4p_iplog_94(seq):
       sun = ssh('192.168.3.94',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-p4p_ip-7180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def registerwylmdep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/wylm/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage

def wylm_13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','/home/app/shell/ext/ext_wylm.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdextcs','ss':ss})

def cdn_wylm_post(seq):
       ss = do_post1("http://ext.taotaosou.com/wylm/")
       return render_to_response('auto/cdn.html',{'title':'cdn','ss':ss})

def registerwylmsdep(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/exts_wylm/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage

def wylms_13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','/home/app/shell/exts/exts_wylm.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdextcs','ss':ss})

def hlz_scorecp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/hlz_score/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/hlz_score/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})




def hlz_scoredep_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_score.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_scorehg_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_scorehg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_scorelog_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-hlz_score-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def hlz_scoredep_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/home/app/shell/hlz_score.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_scorehg_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/home/app/shell/hlz_scorehg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_scorelog_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py   /home/app/tomcat-7.0.27-hlz_score-8580/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def hlz_rewardcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/hlz_reward/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/hlz_reward/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})




def hlz_rewarddep_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_reward.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_rewardhg_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_rewardhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_rewardlog_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_reward-8680/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def hlz_rewarddep_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/home/app/shell/hlz_reward.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_rewardhg_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/home/app/shell/hlz_rewardhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_rewardlog_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-hlz_reward-8680/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def registeruniondep(req):
    if req.method == 'POST':
	os.system('rm -rf /nfsdata/bohan/sypt-super/qianduan/union/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/union/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  

def union_13(seq):
       sun = ssh('10.0.0.13',58022,'bohan','sudo su - app','/home/app/shell/union.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'union','ss':ss})


def p4p_pubcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/p4p_pub/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/p4p_pub/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})




def p4p_pubdep_81(seq):
       sun = ssh('192.168.3.81',58022,'bohan','sudo su - app','/home/app/shell/p4p_pub.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def p4p_pubhg_41(seq):
       sun = ssh('192.168.3.81',58022,'bohan','sudo su - app','/home/app/shell/p4p_pubhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def p4p_publog_41(seq):
       sun = ssh('192.168.3.81',58022,'bohan','sudo su - app','tail -n 200 /home/app/tomcat-8.0.23-pub-8580/logs/catalina.out')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})
	   

def hlz_mqcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/hlz_mq/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/hlz_mq/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})




def hlz_mqdep_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_mq.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_mqhg_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/home/app/shell/hlz_mqhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def hlz_mqlog_91(seq):
       sun = ssh('10.0.0.91',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py  /home/app/tomcat-7.0.27-hlz_mq-8180/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})

def register_qly_extension(req):
    if req.method == 'POST':
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/qly_extension/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage

def qly_extension_164(seq):
       sun = ssh('10.0.0.164',58022,'bohan','sudo su - app','/home/app/shell/qly_extension.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'log-qdextscs','ss':ss})


def registertts_addep(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/qianduan/tts_ad/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/qianduan/tts_ad/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})

def tts_ad_86(seq):
       sun = ssh('10.0.0.86',58022,'bohan','sudo su - app','/home/app/shell/tts-ad.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts_ad','ss':ss})

def cdn_tts_ad_post(seq):
       ss = do_post("http://img.taotaosou.cn/tts-ad/","http://img01.taotaosou.cn/tts-ad/","http://img02.taotaosou.cn/tts-ad/","http://img03.taotaosou.cn/tts-ad/")
       return render_to_response('auto/cdn.html',{'title':'cdn','ss':ss})

def registerad_mgrcp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/ad_mgr/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/ad_mgr/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})

def ad_mgrdep_124(seq):
       sun = ssh('192.168.3.124',58022,'bohan','sudo su - app','/home/app/shell/ad_mgr.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def ad_mgrhg_124(seq):
       sun = ssh('192.168.3.124',58022,'bohan','sudo su - app','/home/app/shell/ad_mgrhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def ad_mgrlog_124(seq):
       sun = ssh('192.168.3.124',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-ad-mgr-6380/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def ad_promotioncp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/ad-promotion/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/ad-promotion/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})



def ad_promotiondep_124(seq):
       sun = ssh('192.168.3.124',58022,'bohan','sudo su - app','/home/app/shell/ad-promotion.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def ad_promotionhg_124(seq):
       sun = ssh('192.168.3.124',58022,'bohan','sudo su - app','/home/app/shell/ad-promotionhg.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def ad_promotionlog_124(seq):
       sun = ssh('192.168.3.124',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/log.py /home/app/tomcat-7.0.27-ad-promotion-6480/')
       ss = sun.split('\n')
       return render_to_response('auto/log.html',{'title':'tts','ss':ss})


def salecp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/sale/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/sale/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})


def saledep1_36(seq):
       sun = ssh('192.168.3.36',58022,'bohan','sudo su - app','/home/app/shell/tts-sale.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})
	   
def saledep1_37(seq):
       sun = ssh('192.168.3.37',58022,'bohan','sudo su - app','/home/app/shell/tts-sale.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})


def sale_admincp(req):
    if req.method == 'POST':
        os.system('rm -rf /nfsdata/bohan/sypt-super/tts-sale-admin/*')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/tts-sale-admin/'
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})

def sale_admindep1_36(seq):
       sun = ssh('192.168.3.36',58022,'bohan','sudo su - app','/home/app/shell/sale-admin.py')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'tts','ss':ss})

def registerqly_findhuo(req):   #chage
    if req.method == 'POST':
        os.system('rm -rf  /nfsdata/bohan/sypt-super/qly_findhuo/*.zip')
        form = UserForm(req.POST)
        if form.is_valid():
            DD = form.cleaned_data
            try:
                PP = DD['name']
                cc = os.path.basename(PP)
                PATH1 = '/nfsdata/bohan/sypt-super/findhuo/'   #chage
                t = paramiko.Transport(("10.0.0.36",58022))
                t.connect(username = "patch", password = "ta0ta0s0u")
                sftp = paramiko.SFTPClient.from_transport(t)
                remotepath='/home/patch/%s' %PP
                localpath=  PATH1 + cc
                sftp.get(remotepath, localpath)
                t.close()
                return HttpResponse('***10.0.0.36:%s***  to ***%s*** cp OK' % (remotepath,localpath))
            except :
                return HttpResponse('path error')
    else:
        form = UserForm()
    return render_to_response('register.html',{'form':form})  #chage
	
	
	
def zzbsqly_findhuo(req):                    #chage
 return render_to_response('auto/zzbs-qly_findhuo.html',{'title':'zzbs'})  #chage

def qly_findhuodep_42(seq):
       sun = ssh('192.168.3.42',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/br_bs.py  qly_findhuo /home/app/tts-supply-plugin /nfsdata/bohan/sypt-super/findhuo/tts-supply-plugin-*.zip')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly_findhuo','ss':ss})

def qly_findhuodep_49(seq):
       sun = ssh('192.168.3.49',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/br_bs.py   qly_findhuo /home/app/tts-supply-plugin /nfsdata/bohan/sypt-super/findhuo/tts-supply-plugin-*.zip')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly_findhuo','ss':ss})


def sun_text(seq):
       sun = ssh('192.168.3.149',58022,'bohan','sudo su - app','/nfsdata/bohan/sypt-super/shell/br_bs.py   qly_findhuo /home/app/tts-supply-plugin /nfsdata/bohan/sypt-super/findhuo/tts-supply-plugin-*.zip')
       ss = sun.split('\n')
       return render_to_response('auto/dep-bijia.html',{'title':'qly_findhuo','ss':ss})
